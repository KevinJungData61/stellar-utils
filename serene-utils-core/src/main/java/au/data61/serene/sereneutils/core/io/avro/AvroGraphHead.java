/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package au.data61.serene.sereneutils.core.io.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroGraphHead extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7695152953884917956L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroGraphHead\",\"namespace\":\"au.data61.serene.sereneutils.core\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"boolean\",\"long\",\"double\",\"null\"]}},{\"name\":\"label\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroGraphHead> ENCODER =
      new BinaryMessageEncoder<AvroGraphHead>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroGraphHead> DECODER =
      new BinaryMessageDecoder<AvroGraphHead>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroGraphHead> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroGraphHead> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroGraphHead>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroGraphHead to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroGraphHead from a ByteBuffer. */
  public static AvroGraphHead fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> data;
  @Deprecated public java.lang.CharSequence label;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroGraphHead() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param data The new value for data
   * @param label The new value for label
   */
  public AvroGraphHead(java.lang.CharSequence id, java.util.Map<java.lang.CharSequence,java.lang.Object> data, java.lang.CharSequence label) {
    this.id = id;
    this.data = data;
    this.label = label;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return data;
    case 2: return label;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: data = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    case 2: label = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Creates a new AvroGraphHead RecordBuilder.
   * @return A new AvroGraphHead RecordBuilder
   */
  public static AvroGraphHead.Builder newBuilder() {
    return new AvroGraphHead.Builder();
  }

  /**
   * Creates a new AvroGraphHead RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroGraphHead RecordBuilder
   */
  public static AvroGraphHead.Builder newBuilder(AvroGraphHead.Builder other) {
    return new AvroGraphHead.Builder(other);
  }

  /**
   * Creates a new AvroGraphHead RecordBuilder by copying an existing AvroGraphHead instance.
   * @param other The existing instance to copy.
   * @return A new AvroGraphHead RecordBuilder
   */
  public static AvroGraphHead.Builder newBuilder(AvroGraphHead other) {
    return new AvroGraphHead.Builder(other);
  }

  /**
   * RecordBuilder for AvroGraphHead instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroGraphHead>
    implements org.apache.avro.data.RecordBuilder<AvroGraphHead> {

    private java.lang.CharSequence id;
    private java.util.Map<java.lang.CharSequence,java.lang.Object> data;
    private java.lang.CharSequence label;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroGraphHead.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroGraphHead instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroGraphHead other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public AvroGraphHead.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public AvroGraphHead.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public AvroGraphHead.Builder setData(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public AvroGraphHead.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public AvroGraphHead.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.label = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public AvroGraphHead.Builder clearLabel() {
      label = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroGraphHead build() {
      try {
        AvroGraphHead record = new AvroGraphHead();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[1]);
        record.label = fieldSetFlags()[2] ? this.label : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroGraphHead>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroGraphHead>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroGraphHead>
    READER$ = (org.apache.avro.io.DatumReader<AvroGraphHead>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
