/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package au.data61.serene.sereneutils.core.io.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroEdge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6302647663122529457L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroEdge\",\"namespace\":\"au.data61.serene.sereneutils.core\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"target\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"boolean\",\"long\",\"double\",\"null\"]}},{\"name\":\"label\",\"type\":[\"string\",\"null\"]},{\"name\":\"graphs\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroEdge> ENCODER =
      new BinaryMessageEncoder<AvroEdge>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroEdge> DECODER =
      new BinaryMessageDecoder<AvroEdge>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroEdge> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroEdge> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroEdge>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroEdge to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroEdge from a ByteBuffer. */
  public static AvroEdge fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public java.lang.CharSequence target;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> data;
  @Deprecated public java.lang.CharSequence label;
  @Deprecated public java.util.List<java.lang.CharSequence> graphs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroEdge() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param source The new value for source
   * @param target The new value for target
   * @param data The new value for data
   * @param label The new value for label
   * @param graphs The new value for graphs
   */
  public AvroEdge(java.lang.CharSequence id, java.lang.CharSequence source, java.lang.CharSequence target, java.util.Map<java.lang.CharSequence,java.lang.Object> data, java.lang.CharSequence label, java.util.List<java.lang.CharSequence> graphs) {
    this.id = id;
    this.source = source;
    this.target = target;
    this.data = data;
    this.label = label;
    this.graphs = graphs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return source;
    case 2: return target;
    case 3: return data;
    case 4: return label;
    case 5: return graphs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: source = (java.lang.CharSequence)value$; break;
    case 2: target = (java.lang.CharSequence)value$; break;
    case 3: data = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    case 4: label = (java.lang.CharSequence)value$; break;
    case 5: graphs = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'target' field.
   * @return The value of the 'target' field.
   */
  public java.lang.CharSequence getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * @param value the value to set.
   */
  public void setTarget(java.lang.CharSequence value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'graphs' field.
   * @return The value of the 'graphs' field.
   */
  public java.util.List<java.lang.CharSequence> getGraphs() {
    return graphs;
  }

  /**
   * Sets the value of the 'graphs' field.
   * @param value the value to set.
   */
  public void setGraphs(java.util.List<java.lang.CharSequence> value) {
    this.graphs = value;
  }

  /**
   * Creates a new AvroEdge RecordBuilder.
   * @return A new AvroEdge RecordBuilder
   */
  public static AvroEdge.Builder newBuilder() {
    return new AvroEdge.Builder();
  }

  /**
   * Creates a new AvroEdge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroEdge RecordBuilder
   */
  public static AvroEdge.Builder newBuilder(AvroEdge.Builder other) {
    return new AvroEdge.Builder(other);
  }

  /**
   * Creates a new AvroEdge RecordBuilder by copying an existing AvroEdge instance.
   * @param other The existing instance to copy.
   * @return A new AvroEdge RecordBuilder
   */
  public static AvroEdge.Builder newBuilder(AvroEdge other) {
    return new AvroEdge.Builder(other);
  }

  /**
   * RecordBuilder for AvroEdge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroEdge>
    implements org.apache.avro.data.RecordBuilder<AvroEdge> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence source;
    private java.lang.CharSequence target;
    private java.util.Map<java.lang.CharSequence,java.lang.Object> data;
    private java.lang.CharSequence label;
    private java.util.List<java.lang.CharSequence> graphs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroEdge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.target)) {
        this.target = data().deepCopy(fields()[2].schema(), other.target);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.graphs)) {
        this.graphs = data().deepCopy(fields()[5].schema(), other.graphs);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroEdge instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroEdge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.target)) {
        this.target = data().deepCopy(fields()[2].schema(), other.target);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.graphs)) {
        this.graphs = data().deepCopy(fields()[5].schema(), other.graphs);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public AvroEdge.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public AvroEdge.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearSource() {
      source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'target' field.
      * @return The value.
      */
    public java.lang.CharSequence getTarget() {
      return target;
    }

    /**
      * Sets the value of the 'target' field.
      * @param value The value of 'target'.
      * @return This builder.
      */
    public AvroEdge.Builder setTarget(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.target = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'target' field has been set.
      * @return True if the 'target' field has been set, false otherwise.
      */
    public boolean hasTarget() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'target' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearTarget() {
      target = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public AvroEdge.Builder setData(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public AvroEdge.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.label = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearLabel() {
      label = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'graphs' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGraphs() {
      return graphs;
    }

    /**
      * Sets the value of the 'graphs' field.
      * @param value The value of 'graphs'.
      * @return This builder.
      */
    public AvroEdge.Builder setGraphs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.graphs = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'graphs' field has been set.
      * @return True if the 'graphs' field has been set, false otherwise.
      */
    public boolean hasGraphs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'graphs' field.
      * @return This builder.
      */
    public AvroEdge.Builder clearGraphs() {
      graphs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroEdge build() {
      try {
        AvroEdge record = new AvroEdge();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.source = fieldSetFlags()[1] ? this.source : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.target = fieldSetFlags()[2] ? this.target : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[3]);
        record.label = fieldSetFlags()[4] ? this.label : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.graphs = fieldSetFlags()[5] ? this.graphs : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroEdge>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroEdge>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroEdge>
    READER$ = (org.apache.avro.io.DatumReader<AvroEdge>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
